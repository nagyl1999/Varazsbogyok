package entity;

/*

  Generated by StarUML(tm) Java Add-In

  @ Project : Varazsbogyok
  @ File Name : entity.Virologist.java
  @ Date : 2022. 03. 23.
  @ Author : varazsbogyok

*/


import game.Steppable;
import game.Tile;
import inventory.*;
import item.*;
import item.AgentComparator;

import java.util.ArrayList;

/**
 * Egy közös entitás működését szimuláló osztály
 */
public abstract class Virologist implements Steppable, IInventoryHolder {
    /**
     * Mező, amelyen a virológus jelenleg áll
     */
    protected Tile tile;
    /**
     * A virológusunk állapotát tároló változó
     */
    protected boolean paralyzed;
    /**
     * A virológushoz tartozó inventory
     */
    protected Inventory inventory;
    /**
     * A virológusra felkent ágensek
     */
    protected ArrayList<Agent> applied;
    /**
     * Inventory méret
     */
    public static int inventorySize = 10;

    /**
     * Konstruktor
     */
    public Virologist() {
        inventory = new Inventory(Virologist.inventorySize);
        applied = new ArrayList<>();
        paralyzed = false;
    }

    /**
     * Getter - Inventory
     */
    public Inventory getInventory() {
        return inventory;
    }

    /**
     * Getter - Felkent ágensek
     */
    public ArrayList<Agent> getApplied() {
        return applied;
    }

    /**
     * Getter - Paralyzed
     */
    public boolean getParalyzed() {
        return paralyzed;
    }

    /**
     * Getter - Mező
     */
    public Tile getTile() {
        return tile;
    }

    /**
     * Setter - Mező
     */
    public void setTile(Tile t) {
        tile = t;
    }

    /** Felszerelés használata más virológuson
     *
     * @param g A felhasznált felszerelés
     * @param v A megtámadott virológus
     */
    public void useGear(Gear g, Virologist v) {
        g.use(v);
    }

    /**
     * Ágens felkenése a virológusra, ágensek rendezése a konzisztens
     * állapot fenttartása érdekében, mielőtt
     *
     * @param v Virológus aki felkeni az ágenst
     * @param a Agéns amit felkennek
     */
    public void applyAgent(Virologist v, Agent a) throws ItemNotFoundException {
        applied.add(a);
        for (Gear g : VisitorManager.getGear(this))
            g.protect(this, v, a);
        for (Agent g : getApplied())
            g.protect(this, a);
        sortApplied();
    }

    /**
     * Ágens leszedése a virológusról
     */
    public void removeApplied(Agent a) throws ItemNotFoundException {
        if (!applied.contains(a))
            throw new ItemNotFoundException("Ilyen ágens nincs felkenve!");
        applied.remove(a);
    }

    /**
     * A virológus bénult állapotának beállítása
     */
    public void setParalyzed(boolean p) {
        paralyzed = p;
    }

    /**
     * Felkent ágensek lejárati idő szerinti növekvő sorbarendezése
     */
    public void sortApplied() {
        applied.sort(new AgentComparator());
    }

    /**
     * A virológus másik mezőre léptetése
     */
    public void move(Tile t) {
        if (getParalyzed())
            return;
        tile.removeVirologist(this);
        t.addVirologist(this);
    }

    /**
     * Egy másik virológus kirablása
     */
    public void robVirologist(Virologist v) {
        if (!v.getParalyzed())
            return;
        for (IStorable i : VisitorManager.getStealable(v)) {
            try {
                getInventory().addItem(i);
            } catch (NotEnoughSpaceException n) {
                return; // Elfogyott a hely a mi inventory-nkban
            } catch (Exception ignore) {
            }
        }

    }

    /**
     * Egy ágens recept alapján való létrehozása
     */
    public void makeAgent(Recipe r) throws ItemNotFoundException, NotEnoughSpaceException {
        if (!VisitorManager.craftRecipe(this, r))
            return;
        InventorySorterVisitor i = VisitorManager.sortInventory(this);
        for (int j = 0; j < r.getNumberOfAminoacid(); j++) {
            inventory.removeItem(i.getAminoacidItems().get(j));
        }
        for (int j = 0; j < r.getNumberOfNucleoid(); j++) {
            inventory.removeItem(i.getNucleoidItems().get(j));
        }
        inventory.addItem(r.addAgent());
    }

    /**
     * Ágens felhasználása a virológus által
     *
     * @param v A célpont
     * @param a A felhasználni kívánt ágens
     */
    public void useAgent(Virologist v, Agent a) throws ItemNotFoundException {
        if (getParalyzed())
            return;
        getInventory().removeItem(a);
        a.use(this, v);
    }

    /**
     * Leszármazottak által definiálandó működés
     */
    public abstract void step();

    /**
     * Leszármazott általi döntés egy item felvételéről
     */
    public abstract void pickUp(IStorable s);
}
