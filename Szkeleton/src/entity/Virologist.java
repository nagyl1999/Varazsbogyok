package entity;

/*

  Generated by StarUML(tm) Java Add-In

  @ Project : Varazsbogyok
  @ File Name : entity.Virologist.java
  @ Date : 2022. 03. 23.
  @ Author : varazsbogyok

*/


import game.Steppable;
import game.Tile;
import inventory.*;
import item.Agent;
import item.Recipe;

import java.util.ArrayList;

/**
 * Egy közös entitás működését szimuláló osztály
 */
public abstract class Virologist implements Steppable, IInventoryHolder {
    /**
     * Mező, amelyen a virológus jelenleg áll
     */
    protected Tile tile;
    /**
     * A virológusunk állapotát tároló változó
     */
    protected boolean paralyzed;
    /**
     * A virológushoz tartozó inventory
     */
    protected Inventory inventory;
    /**
     * A virológusra felkent ágensek
     */
    protected ArrayList<Agent> applied;

    /**
     * Getter - Inventory
     */
    public Inventory getInventory() {
        return inventory;
    }

    /**
     * Getter - Felkent ágensek
     */
    public ArrayList<Agent> getApplied() {
        return applied;
    }

    /**
     * Getter - Paralyzed
     */
    public boolean getParalyzed() {
        return paralyzed;
    }

    /**
     * Ágens felkenése a virológusra
     */
    public void applyAgent(Agent a) {
        // TODO - vakcina + védőfelszerelés protect
        applied.add(a);
        a.effect(this);
    }

    /**
     * Ágens leszedése a virológusról
     */
    public void removeApplied(Agent a) throws ItemNotFoundException {
        if(!applied.contains(a))
            throw new ItemNotFoundException("Ilyen ágens nincs felkenve!");
        applied.remove(a);
    }

    /**
     * A virológus bénult állapotának beállítása
     */
    public void setParalyzed(boolean p) {
        paralyzed = p;
    }

    /**
     * Felkent ágensek lejárati idő szerinti növekvő sorbarendezése
     */
    public void sortApplied() {
        // TODO - Agent osztálynak implementálnia kell egy Comparator-t
    }

    /**
     * A virológus másik mezőre léptetése
     */
    public void move(Tile t) {
        if (getParalyzed())
            return;
        tile.removeVirologist(this);
        t.acceptVirologist(this);
    }

    /**
     * Egy másik virológus kirablása
     */
    public void robVirologist(Virologist v) {
        if (!v.getParalyzed())
            return;
        Inventory i = v.getInventory();
        // TODO - while van hely az inventory-ban & van lopható cucc addig pakoljuk ki egyesével
    }

    /**
     * Egy ágens recept alapján való létrehozása
     */
    public void makeAgent(Recipe r) {
        if (!VisitorManager.craftRecipe(this, r))
            return;
        // TODO - recepttől le kellene kérni, hogy mégis milyen ágenst kraftoltunk, elvesszük a material-t
    }

    /**
     * Ágens felhasználása a virológus által
     *
     * @param v A célpont
     * @param a A felhasználni kívánt ágens
     */
    public void useAgent(Virologist v, Agent a) throws ItemNotFoundException {
        if (getParalyzed())
            return;
        getInventory().removeItem(a);
        a.use(this, v);
    }

    /**
     * Leszármazottak által definiálandó működés
     */
    public abstract void step();

    /**
     * Leszármazott általi döntés egy item felvételéről
     */
    public abstract void pickUp(IStorable s);
}
