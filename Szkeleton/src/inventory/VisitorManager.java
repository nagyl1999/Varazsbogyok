package inventory;

/*

  Generated by StarUML(tm) Java Add-In

  @ Project : Varazsbogyok
  @ File Name : inventory.VisitorManager.java
  @ Date : 2022. 03. 23.
  @ Author : varazsbogyok

*/


import entity.Virologist;
import item.Bag;
import item.Glove;
import item.Jacket;
import item.Recipe;

import java.util.ArrayList;

/** A VisitorManager osztály felel minden olyan kérdésre,
 * amely az inventory tartalmával kapcsolatosan vetődik fel
 * elkerülve a TypeCheck-et */
public class VisitorManager {

	/** Egy inventory tartalmának szétválogatása, amennyiben van zsák, azét is megnézzük */
	public InventorySorterVisitor sortInventory(IInventoryHolder e) {
		InventorySorterVisitor i = new InventorySorterVisitor();
		e.getInventory().accept(i);
		if(i.getBagItems().size() > 0) {
			for (Bag b : i.getBagItems()) {
				b.getInventory().accept(i);
			}
		}
		return i;
	}
	
	/** Megvizsgáljuk, hogy egy adott virológus minden
	 * receptel rendelkezik-e, amennyiben igen, meghívjuk
	 * a Game.WinGame függvényt */
	public void hasWonTheGame(Virologist e) {
	}
	
	/** Recept létrehozásához szükséges anyagmennyiség
	 * ellenőrzése */
	public int checkMaterialCount(Virologist e) {
		return 0; // TODO
	}
	
	/** Egy recept előállítása az inventory-ban található
	 * anyagok, és a kapott recept segítségével */
	public boolean craftRecipe(Virologist v, Recipe r) {
		return false; // TODO
	}
	
	/** Ellopható objektumok a birtokos inventory-jából */
	public ArrayList<IStorable> getStealable(Virologist v) {
		return null; // TODO
	}
	
	/** Van-e táska az inventory-ban */
	public boolean containsGear(Virologist v, Bag g) {
		return false; // TODO
	}

	/** Van-e kesztyű az inventory-ban */
	public boolean containsGear(Virologist v, Glove g) {
		return false; // TODO
	}

	/** Van-e köpeny az inventory-ban */
	public boolean containsGear(Virologist v, Jacket g) {
		return false; // TODO
	}
}
