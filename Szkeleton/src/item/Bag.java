package item;

/*

  Generated by StarUML(tm) Java Add-In

  @ Project : Varazsbogyok
  @ File Name : item.Bag.java
  @ Date : 2022. 03. 23.
  @ Author : varazsbogyok

*/

import entity.Virologist;
import inventory.IInventoryHolder;
import inventory.IInventoryVisitor;
import inventory.Inventory;

/**
 * A játékban a zsátipusú védőfelszerelés. Egy zsákban nem lehet még egy zsák.
 */
public class Bag extends Gear implements IInventoryHolder {
    /**
     * A zsákhoz tartozó inventory
     */
    protected Inventory inventory;
    /**
     * Ikon elérési út
     */
    protected String iconPath = "resources\\bag.jpg";
    /**
     * Inventory méret
     */
    public static int inventorySize = 25;
    /**
     * Hátralévő használatok száma, a zsák nem bomlik le. -1 mivel akkor bomlik el egy tárgy ha eléri a 0-t, nem ha kisebb mint 0. 
     */
    public static int DURABILITY = -1;

    /**
     * Konstruktor
     */
    public Bag() {
        super(Bag.DURABILITY);
        inventory = new Inventory(this, Bag.inventorySize);
    }

    /**
     * Getter - Ikon elérési út
     */
    public String getIconPath() {
        return iconPath;
    }

    /**
     * A paraméterben kapott virológust megvédi a paraméterben kapott ágens ellen.
     */
    public void protect(Virologist v1, Virologist v2, Agent a) {
        // Nem védi meg
    }

    /**
     * A paraméterben kapott virológus kiválasztja a zsákot.
     *
     * @param v A Virol�gus aki felveszi a zsákot
     */
    public void equip(Virologist v) {
        equipped = true;
    }

    /**
     * A paraméterben kapott virológus másik védőfelszerelésre vált.
     *
     * @param v A Virol�gus aki leadja a zsákot
     */
    public void unequip(Virologist v) {
        equipped = false;
    }

    /**
     * A felszerelést nem lehet használni
     */
    public void use(Virologist v1, Virologist v2) {
    }

    /**
     * A visitor tervezési mintát ez a függv�ny valósítja meg, ez fogja fogadni a zsák típust.
     */
    public void accept(IInventoryVisitor i) {
        i.visit(this);
    }

    /**
     * Visszaadja a zsák tartalmát.
     */
    public Inventory getInventory() {
        return inventory;
    }
}
