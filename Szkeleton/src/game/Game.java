package game;

/*

  Generated by StarUML(tm) Java Add-In

  @ Project : Varazsbogyok
  @ File Name : game.Game.java
  @ Date : 2022. 03. 23.
  @ Author : varazsbogyok

*/

import entity.Bot;
import entity.Player;
import entity.Virologist;
import java.util.ArrayList;
import java.util.Random;

/** JÃ¡tÃ©k objektum, felelÅssÃ©ge a jÃ¡tÃ©k elindÃ­tÃ¡sa, kilÃ©ptetÃ©se */
public final class Game {
	/** JÃ¡tÃ©ktÃ©r */
	public static Map map;
	/** A jÃ¡tÃ©kban a pÃ¡lyaelemek szÃ¡ma */
	public static int tileCount = 50;
	/** A jÃ¡tÃ©kban a botok szÃ¡ma */
	public static int botCount = 3;
	/** A jÃ¡tÃ©kban az egyes pÃ¡lyaelemek maximÃ¡lis szomszÃ©da */
	public static int maxNeighbours = 4;
	/** A jÃ¡tÃ©kban az idÅzÃ­tÅ*/
	public static  Timer timer;

	/** Konstruktor */
	public Game(){
		map = new Map();
		timer = timer.getInstance();
	}
	/** Ãj jÃ¡tÃ©k indÃ­tÃ¡sa, pÃ¡lyagenerÃ¡lÃ¡s  */
	public static void newGame() {}
	
	/** Még nem biztos, hogy kell*/
	public static void generateRandomMap() {
		ArrayList<Integer> neighbours = new ArrayList<Integer>();
		for (int i = 0; i < tileCount; i++) map.addTile(randomTile());
		for (int i = 0; i < tileCount; i++) {
			neighbours.clear();
			// itt felÃ©pitjuk az esetleges szomszÃ©dok listÃ¡jÃ¡t, kivÃ©ve a soron lÃ©vo elemet
			for (int j = 0; j < tileCount; j++) if(i != j) neighbours.add(j);
			/** Itt fogjuk a szomszÃ©dokat beÃ¡llitani, egy pÃ¡lyaelemnek legfeljebb
			 * maxNeighbours szomszÃ©dja lehet, ezutÃ¡n hozzÃ¡adunk a neighbours listÃ¡bol egyet,
			 * miutÃ¡n hozzÃ¡adtuk kivesszÃ¼k a neighbours listÃ¡bol az elemet, igy a listÃ¡ban
			 * csak olyan elemek maradnak amik mÃ©g nem szomszÃ©dosak az adott pÃ¡lyaelemmek*/
			Random r = new Random();
			for (int j = 0; j < r.nextInt(maxNeighbours); j++) {
				int n = r.nextInt(tileCount-j-1);
				map.getTiles().get(i).addNeighbour(map.getTiles().get(n));
				neighbours.remove(n);
				}
			}
		//jÃ¡tÃ©kos lÃ©trehozÃ¡sa, Ã©s hozzÃ¡adaÃ¡sa a lÃ©ptethetÅ osztÃ¡lyhoz
		map.getTiles().get(0).addVirologist(new Player());
		timer.addSteppable(map.getTiles().get(0).getVirologist().get(0));
		//botok lÃ©trehozÃ¡sa Ã©s hozzÃ¡adÃ¡sa a lÃ©ptethetÅ dolgokhoz
		for (int i = 1; i <= botCount; i++) {
			map.getTiles().get(i).addVirologist(new Bot());
			timer.addSteppable(map.getTiles().get(i).getVirologist().get(0));
		}
		//timer elindÃ­tÃ¡sa
		//while(true) timer.tick(); // TODO - szerintem ez Ã­gy nem fog mÅ±kÃ¶dni a grafikus felÃ¼lettel
	} 

	/** JÃ¡tÃ©kbÃ³l valÃ³ kilÃ©pÃ©s */
	public static void exitGame() {
		System.out.println("A jÃ¡tÃ©knak vÃ©ge :/");
	}
	
	/** Egy virolÃ³gus megnyerte a jÃ¡tÃ©kot */
	public static void winGame(Virologist v) {
		System.out.println("A jÃ¡tÃ©kot " + v.toString() + " nyerte");
	}

	/** Egy vÃ©letlenszeru pÃ¡lyaelemet generÃ¡l */
	public static Tile randomTile(){
		Random r = new Random();
		int n = r.nextInt(4);
		switch(n){
			case 0: return new SafeLaboratory();
			case 1: return new Safehouse();
			case 2: return new Storage();
			case 3: return new BearLaboratory();
			default: return new Town();
		}
	}
}