package game;

/*

  Generated by StarUML(tm) Java Add-In

  @ Project : Varazsbogyok
  @ File Name : game.Tile.java
  @ Date : 2022. 03. 23.
  @ Author : varazsbogyok

*/

import entity.Virologist;
import graphics.IDrawable;
import inventory.IInventoryHolder;
import inventory.NotEnoughSpaceException;

import java.awt.Color;
import java.awt.Polygon;
import java.io.Serializable;
import java.util.ArrayList;

import inventory.Inventory;

/**
 * Mező ősosztály
 */
public abstract class Tile implements IInventoryHolder, Serializable , IDrawable {
    /**
     * A mezőn tartózkodó virológusok
     */
    protected ArrayList<Virologist> virologists;
    /**
     * A mező szomszédai
     */
    protected ArrayList<Tile> neighbours;
    protected Inventory inventory;
    private int inventorySize = 3;
    protected Color c;
    protected Polygon polly;
    protected Polygon circle;
    protected int posx;
    protected int posy;
    protected ArrayList<Vec2> borderpoints;
    protected ArrayList<Vec2> points;
    /**
     * Konstruktor
     */
    public Tile() {
        virologists = new ArrayList<Virologist>();
        neighbours = new ArrayList<Tile>();
        inventory = new Inventory(inventorySize);
        c = Color.black;
        polly = new Polygon();
        circle = new Polygon();
        borderpoints = new ArrayList<Vec2>();
        points = new ArrayList<Vec2>();
        posx = 0;
        posy = 0;
        try {
            fillInventory();
        } catch (Exception ignore) {
        }
    }

    /**
     * Getter - szomszédok
     */
    public ArrayList<Tile> getNeighbours() {
        return neighbours;
    }

    /**
     * Getter - virológusok
     */
    public ArrayList<Virologist> getVirologist() {
        return virologists;
    }

    /**
     * Virológus hozzáadása a mezőhöz
     */
    public void addVirologist(Virologist v) {
        virologists.add(v);
        v.setTile(this);
    }

    /**
     * Virológus törlése a mezőről
     */
    public void removeVirologist(Virologist v) {
        virologists.remove(v);
    }

    /**
     * Szomszéd hozzáadása
     */
    public void addNeighbour(Tile t) {
        neighbours.add(t);
    }
    
    /**
     * Szomszéd hozzáadása
     */
    public void setColor(Color c) {
        this.c = c;
    }
    
    /**
     * Szomszéd hozzáadása
     */
    public void setPolly(Polygon p) {
        polly = p;
    }
    
    /**
     * Szomszéd hozzáadása
     */
    public void setX(int x) {
        posx = x;
    }
    
    /**
     * Szomszéd hozzáadása
     */
    public void setY(int y) {
        posy = y;
    }
    
    public void setCircle(Polygon p) {circle = p;}
    
    public Polygon getCircle() {return circle;}
    
    public ArrayList<Vec2> getBorderPolly() {return borderpoints;}
    
    public ArrayList<Vec2> getPoints(){return points;}
    
    public void makePolly() {
    	for(Vec2 p : points) {
    		polly.addPoint(p.getX(), p.getY());
    	}
    }
    
    public boolean contains(Vec2 p) {
    	for(Vec2 q : points) {
    		if(p.x == q.x && p.y==q.y)return true;
    	}
    	return false;
    }

    public void getxy(){
        System.out.println(posx + " " + posy);
    }

    /**
     * A virológus itt fog tudni felvenni egy mezőn található dolgot.
     */
    public abstract void interactedWith(Virologist v) throws NotEnoughSpaceException;

    /**itt töltjük meg az adott mező inventoryját véletlenszerű dolgokkal.*/
    public abstract void fillInventory() throws NotEnoughSpaceException;

}
